Compiled from "Thread.java"
public class java.lang.Thread implements java.lang.Runnable {
  public static final int MAX_PRIORITY;
  public static final int MIN_PRIORITY;
  public static final int NORM_PRIORITY;
  public java.lang.Thread();
  public java.lang.Thread(java.lang.Runnable);
  public java.lang.Thread(java.lang.Runnable, java.lang.String);
  public java.lang.Thread(java.lang.String);
  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable);
  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String);
  public java.lang.Thread(java.lang.ThreadGroup, java.lang.String);
  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long);
  public static int activeCount();
  public final void checkAccess();
  public int countStackFrames();
  public static java.lang.Thread currentThread();
  public void destroy();
  public static void dumpStack();
  public static int enumerate(java.lang.Thread[]);
  public static java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]> getAllStackTraces();
  public java.lang.ClassLoader getContextClassLoader();
  public static java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
  public long getId();
  public final java.lang.String getName();
  public final int getPriority();
  public java.lang.StackTraceElement[] getStackTrace();
  public java.lang.Thread$State getState();
  public final java.lang.ThreadGroup getThreadGroup();
  public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
  public void interrupt();
  public static boolean interrupted();
  public final boolean isAlive();
  public final boolean isDaemon();
  public boolean isInterrupted();
  public final void join() throws java.lang.InterruptedException;
  public final void join(long) throws java.lang.InterruptedException;
  public final void join(long, int) throws java.lang.InterruptedException;
  public final void resume();
  public void run();
  public void setContextClassLoader(java.lang.ClassLoader);
  public final void setDaemon(boolean);
  public static void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
  public final void setName(java.lang.String);
  public final void setPriority(int);
  public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
  public static void sleep(long) throws java.lang.InterruptedException;
  public static void sleep(long, int) throws java.lang.InterruptedException;
  public synchronized void start();
  public final void stop();
  public final synchronized void stop(java.lang.Throwable);
  public final void suspend();
  public java.lang.String toString();
  public static void yield();
  public static boolean holdsLock(java.lang.Object);
}
