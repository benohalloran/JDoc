Compiled from "Class.java"
public final class java.lang.Class<T> implements java.io.Serializable, java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration, java.lang.reflect.Type {
  java.lang.Class();
  public static java.lang.Class<?> forName(java.lang.String) throws java.lang.ClassNotFoundException;
  public static java.lang.Class<?> forName(java.lang.String, boolean, java.lang.ClassLoader) throws java.lang.ClassNotFoundException;
  public java.lang.Class<?>[] getClasses();
  public <A extends java/lang/annotation/Annotation> A getAnnotation(java.lang.Class<A>);
  public java.lang.annotation.Annotation[] getAnnotations();
  public java.lang.String getCanonicalName();
  public java.lang.ClassLoader getClassLoader();
  public native java.lang.Class<?> getComponentType();
  public java.lang.reflect.Constructor<T> getConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException;
  public java.lang.reflect.Constructor<?>[] getConstructors();
  public native java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public java.lang.Class<?>[] getDeclaredClasses();
  public java.lang.reflect.Constructor<T> getDeclaredConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException;
  public java.lang.reflect.Constructor<?>[] getDeclaredConstructors();
  public java.lang.reflect.Field getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException;
  public java.lang.reflect.Field[] getDeclaredFields();
  public java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class<?>...) throws java.lang.NoSuchMethodException;
  public java.lang.reflect.Method[] getDeclaredMethods();
  public native java.lang.Class<?> getDeclaringClass();
  public native java.lang.Class<?> getEnclosingClass();
  public native java.lang.reflect.Constructor<?> getEnclosingConstructor();
  public native java.lang.reflect.Method getEnclosingMethod();
  public T[] getEnumConstants();
  public java.lang.reflect.Field getField(java.lang.String) throws java.lang.NoSuchFieldException;
  public java.lang.reflect.Field[] getFields();
  public java.lang.reflect.Type[] getGenericInterfaces();
  public java.lang.reflect.Type getGenericSuperclass();
  public native java.lang.Class<?>[] getInterfaces();
  public java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class<?>...) throws java.lang.NoSuchMethodException;
  public java.lang.reflect.Method[] getMethods();
  public int getModifiers();
  public java.lang.String getName();
  public java.lang.String getSimpleName();
  public java.security.ProtectionDomain getProtectionDomain();
  public java.net.URL getResource(java.lang.String);
  public java.io.InputStream getResourceAsStream(java.lang.String);
  public java.lang.Object[] getSigners();
  public native java.lang.Class<? super T> getSuperclass();
  public synchronized java.lang.reflect.TypeVariable<java.lang.Class<T>>[] getTypeParameters();
  public boolean isAnnotation();
  public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public native boolean isAnonymousClass();
  public boolean isArray();
  public native boolean isAssignableFrom(java.lang.Class<?>);
  public boolean isEnum();
  public native boolean isInstance(java.lang.Object);
  public native boolean isInterface();
  public boolean isLocalClass();
  public boolean isMemberClass();
  public native boolean isPrimitive();
  public boolean isSynthetic();
  public T newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException;
  public java.lang.String toString();
  public java.lang.Package getPackage();
  public native boolean desiredAssertionStatus();
  public <U extends java/lang/Object> java.lang.Class<? extends U> asSubclass(java.lang.Class<U>);
  public T cast(java.lang.Object);
}
