Compiled from "Method.java"
public final class java.lang.reflect.Method extends java.lang.reflect.AccessibleObject implements java.lang.reflect.GenericDeclaration,java.lang.reflect.Member {
  java.lang.reflect.Method();
  public java.lang.reflect.TypeVariable<java.lang.reflect.Method>[] getTypeParameters();
  public java.lang.String toGenericString();
  public java.lang.reflect.Type[] getGenericParameterTypes();
  public java.lang.reflect.Type[] getGenericExceptionTypes();
  public java.lang.reflect.Type getGenericReturnType();
  public java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public <A extends java/lang/annotation/Annotation> A getAnnotation(java.lang.Class<A>);
  public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public java.lang.annotation.Annotation[][] getParameterAnnotations();
  public boolean isVarArgs();
  public boolean isBridge();
  public boolean isSynthetic();
  public java.lang.Object getDefaultValue();
  public boolean equals(java.lang.Object);
  public java.lang.Class<?> getDeclaringClass();
  public java.lang.Class<?>[] getExceptionTypes();
  public int getModifiers();
  public java.lang.String getName();
  public java.lang.Class<?>[] getParameterTypes();
  public java.lang.Class<?> getReturnType();
  public int hashCode();
  public java.lang.Object invoke(java.lang.Object, java.lang.Object...) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException;
  public java.lang.String toString();
}
