Compiled from "ConcurrentSkipListMap.java"
public class java.util.concurrent.ConcurrentSkipListMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.ConcurrentNavigableMap<K, V>, java.lang.Cloneable, java.io.Serializable {
  public java.util.concurrent.ConcurrentSkipListMap();
  public java.util.concurrent.ConcurrentSkipListMap(java.util.Comparator<? super K>);
  public java.util.concurrent.ConcurrentSkipListMap(java.util.Map<? extends K, ? extends V>);
  public java.util.concurrent.ConcurrentSkipListMap(java.util.SortedMap<K, ? extends V>);
  public java.util.concurrent.ConcurrentSkipListMap<K, V> clone();
  public boolean containsKey(java.lang.Object);
  public V get(java.lang.Object);
  public V put(K, V);
  public V remove(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public int size();
  public boolean isEmpty();
  public void clear();
  public java.util.NavigableSet<K> keySet();
  public java.util.NavigableSet<K> navigableKeySet();
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public java.util.concurrent.ConcurrentNavigableMap<K, V> descendingMap();
  public java.util.NavigableSet<K> descendingKeySet();
  public boolean equals(java.lang.Object);
  public V putIfAbsent(K, V);
  public boolean remove(java.lang.Object, java.lang.Object);
  public boolean replace(K, V, V);
  public V replace(K, V);
  public java.util.Comparator<? super K> comparator();
  public K firstKey();
  public K lastKey();
  public java.util.concurrent.ConcurrentNavigableMap<K, V> subMap(K, boolean, K, boolean);
  public java.util.concurrent.ConcurrentNavigableMap<K, V> headMap(K, boolean);
  public java.util.concurrent.ConcurrentNavigableMap<K, V> tailMap(K, boolean);
  public java.util.concurrent.ConcurrentNavigableMap<K, V> subMap(K, K);
  public java.util.concurrent.ConcurrentNavigableMap<K, V> headMap(K);
  public java.util.concurrent.ConcurrentNavigableMap<K, V> tailMap(K);
  public java.util.Map$Entry<K, V> lowerEntry(K);
  public K lowerKey(K);
  public java.util.Map$Entry<K, V> floorEntry(K);
  public K floorKey(K);
  public java.util.Map$Entry<K, V> ceilingEntry(K);
  public K ceilingKey(K);
  public java.util.Map$Entry<K, V> higherEntry(K);
  public K higherKey(K);
  public java.util.Map$Entry<K, V> firstEntry();
  public java.util.Map$Entry<K, V> lastEntry();
  public java.util.Map$Entry<K, V> pollFirstEntry();
  public java.util.Map$Entry<K, V> pollLastEntry();
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  public java.util.Set keySet();
  public java.util.SortedMap tailMap(java.lang.Object);
  public java.util.SortedMap headMap(java.lang.Object);
  public java.util.SortedMap subMap(java.lang.Object, java.lang.Object);
  public java.util.NavigableMap tailMap(java.lang.Object, boolean);
  public java.util.NavigableMap headMap(java.lang.Object, boolean);
  public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean);
  public java.util.NavigableMap descendingMap();
}
