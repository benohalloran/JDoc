Compiled from "Collections.java"
public class java.util.Collections {
  public static final java.util.List EMPTY_LIST;
  public static final java.util.Map EMPTY_MAP;
  public static final java.util.Set EMPTY_SET;
  java.util.Collections();
  public static <T extends java/lang/Object> int binarySearch(java.util.List<? extends java.lang.Comparable<? super T>>, T);
  public static <T extends java/lang/Object> int binarySearch(java.util.List<? extends T>, T, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object> void copy(java.util.List<? super T>, java.util.List<? extends T>);
  public static <T extends java/lang/Object> java.util.Enumeration<T> enumeration(java.util.Collection<T>);
  public static <T extends java/lang/Object> void fill(java.util.List<? super T>, T);
  public static <T extends java/lang/Object & java/lang/Comparable<? super T>> T max(java.util.Collection<? extends T>);
  public static <T extends java/lang/Object> T max(java.util.Collection<? extends T>, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object & java/lang/Comparable<? super T>> T min(java.util.Collection<? extends T>);
  public static <T extends java/lang/Object> T min(java.util.Collection<? extends T>, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object> java.util.List<T> nCopies(int, T);
  public static void reverse(java.util.List<?>);
  public static <T extends java/lang/Object> java.util.Comparator<T> reverseOrder();
  public static <T extends java/lang/Object> java.util.Comparator<T> reverseOrder(java.util.Comparator<T>);
  public static void shuffle(java.util.List<?>);
  public static void shuffle(java.util.List<?>, java.util.Random);
  public static <E extends java/lang/Object> java.util.Set<E> singleton(E);
  public static <E extends java/lang/Object> java.util.List<E> singletonList(E);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> singletonMap(K, V);
  public static <T extends java/lang/Comparable<? super T>> void sort(java.util.List<T>);
  public static <T extends java/lang/Object> void sort(java.util.List<T>, java.util.Comparator<? super T>);
  public static void swap(java.util.List<?>, int, int);
  public static <T extends java/lang/Object> boolean replaceAll(java.util.List<T>, T, T);
  public static void rotate(java.util.List<?>, int);
  public static int indexOfSubList(java.util.List<?>, java.util.List<?>);
  public static int lastIndexOfSubList(java.util.List<?>, java.util.List<?>);
  public static <T extends java/lang/Object> java.util.ArrayList<T> list(java.util.Enumeration<T>);
  public static <T extends java/lang/Object> java.util.Collection<T> synchronizedCollection(java.util.Collection<T>);
  public static <T extends java/lang/Object> java.util.List<T> synchronizedList(java.util.List<T>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> synchronizedMap(java.util.Map<K, V>);
  public static <E extends java/lang/Object> java.util.Set<E> synchronizedSet(java.util.Set<E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.SortedMap<K, V> synchronizedSortedMap(java.util.SortedMap<K, V>);
  public static <E extends java/lang/Object> java.util.SortedSet<E> synchronizedSortedSet(java.util.SortedSet<E>);
  public static <E extends java/lang/Object> java.util.Collection<E> unmodifiableCollection(java.util.Collection<? extends E>);
  public static <E extends java/lang/Object> java.util.List<E> unmodifiableList(java.util.List<? extends E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> unmodifiableMap(java.util.Map<? extends K, ? extends V>);
  public static <E extends java/lang/Object> java.util.Set<E> unmodifiableSet(java.util.Set<? extends E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.SortedMap<K, V> unmodifiableSortedMap(java.util.SortedMap<K, ? extends V>);
  public static <E extends java/lang/Object> java.util.SortedSet<E> unmodifiableSortedSet(java.util.SortedSet<E>);
  public static int frequency(java.util.Collection<?>, java.lang.Object);
  public static final <T extends java/lang/Object> java.util.List<T> emptyList();
  public static final <T extends java/lang/Object> java.util.Set<T> emptySet();
  public static final <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> emptyMap();
  public static <T extends java/lang/Object> java.util.Enumeration<T> emptyEnumeration();
  public static <T extends java/lang/Object> java.util.Iterator<T> emptyIterator();
  public static <T extends java/lang/Object> java.util.ListIterator<T> emptyListIterator();
  public static <E extends java/lang/Object> java.util.Collection<E> checkedCollection(java.util.Collection<E>, java.lang.Class<E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> checkedMap(java.util.Map<K, V>, java.lang.Class<K>, java.lang.Class<V>);
  public static <E extends java/lang/Object> java.util.List<E> checkedList(java.util.List<E>, java.lang.Class<E>);
  public static <E extends java/lang/Object> java.util.Set<E> checkedSet(java.util.Set<E>, java.lang.Class<E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.SortedMap<K, V> checkedSortedMap(java.util.SortedMap<K, V>, java.lang.Class<K>, java.lang.Class<V>);
  public static <E extends java/lang/Object> java.util.SortedSet<E> checkedSortedSet(java.util.SortedSet<E>, java.lang.Class<E>);
  public static <T extends java/lang/Object> boolean addAll(java.util.Collection<? super T>, T...);
  public static boolean disjoint(java.util.Collection<?>, java.util.Collection<?>);
  public static <E extends java/lang/Object> java.util.Set<E> newSetFromMap(java.util.Map<E, java.lang.Boolean>);
  public static <T extends java/lang/Object> java.util.Queue<T> asLifoQueue(java.util.Deque<T>);
  static {};
}
