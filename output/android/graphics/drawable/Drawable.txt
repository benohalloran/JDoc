Compiled from "Drawable.java"
public abstract class android.graphics.drawable.Drawable {
  public android.graphics.drawable.Drawable();
  public abstract void draw(android.graphics.Canvas);
  public void setBounds(int, int, int, int);
  public void setBounds(android.graphics.Rect);
  public final void copyBounds(android.graphics.Rect);
  public final android.graphics.Rect copyBounds();
  public final android.graphics.Rect getBounds();
  public android.graphics.Rect getDirtyBounds();
  public void setChangingConfigurations(int);
  public int getChangingConfigurations();
  public void setDither(boolean);
  public void setFilterBitmap(boolean);
  public final void setCallback(android.graphics.drawable.Drawable$Callback);
  public android.graphics.drawable.Drawable$Callback getCallback();
  public void invalidateSelf();
  public void scheduleSelf(java.lang.Runnable, long);
  public void unscheduleSelf(java.lang.Runnable);
  public abstract void setAlpha(int);
  public int getAlpha();
  public abstract void setColorFilter(android.graphics.ColorFilter);
  public void setColorFilter(int, android.graphics.PorterDuff$Mode);
  public void setTint(android.content.res.ColorStateList, android.graphics.PorterDuff$Mode);
  public android.graphics.ColorFilter getColorFilter();
  public void clearColorFilter();
  public void setHotspot(float, float);
  public void setHotspotBounds(int, int, int, int);
  public boolean isStateful();
  public boolean setState(int[]);
  public int[] getState();
  public void jumpToCurrentState();
  public android.graphics.drawable.Drawable getCurrent();
  public final boolean setLevel(int);
  public final int getLevel();
  public boolean setVisible(boolean, boolean);
  public final boolean isVisible();
  public void setAutoMirrored(boolean);
  public boolean isAutoMirrored();
  public void applyTheme(android.content.res.Resources$Theme);
  public boolean canApplyTheme();
  public abstract int getOpacity();
  public static int resolveOpacity(int, int);
  public android.graphics.Region getTransparentRegion();
  protected boolean onStateChange(int[]);
  protected boolean onLevelChange(int);
  protected void onBoundsChange(android.graphics.Rect);
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public int getMinimumWidth();
  public int getMinimumHeight();
  public boolean getPadding(android.graphics.Rect);
  public boolean getOutline(android.graphics.Outline);
  public android.graphics.drawable.Drawable mutate();
  public static android.graphics.drawable.Drawable createFromStream(java.io.InputStream, java.lang.String);
  public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String);
  public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String, android.graphics.BitmapFactory$Options);
  public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException;
  public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException;
  public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException;
  public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException;
  public static android.graphics.drawable.Drawable createFromPath(java.lang.String);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException;
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException;
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
}
