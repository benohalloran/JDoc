Compiled from "ContentResolver.java"
public abstract class android.content.ContentResolver {
  public static final java.lang.String ANY_CURSOR_ITEM_TYPE;
  public static final java.lang.String CURSOR_DIR_BASE_TYPE;
  public static final java.lang.String CURSOR_ITEM_BASE_TYPE;
  public static final java.lang.String SCHEME_ANDROID_RESOURCE;
  public static final java.lang.String SCHEME_CONTENT;
  public static final java.lang.String SCHEME_FILE;
  public static final java.lang.String SYNC_EXTRAS_ACCOUNT;
  public static final java.lang.String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS;
  public static final java.lang.String SYNC_EXTRAS_DO_NOT_RETRY;
  public static final java.lang.String SYNC_EXTRAS_EXPEDITED;
  public static final java.lang.String SYNC_EXTRAS_FORCE;
  public static final java.lang.String SYNC_EXTRAS_IGNORE_BACKOFF;
  public static final java.lang.String SYNC_EXTRAS_IGNORE_SETTINGS;
  public static final java.lang.String SYNC_EXTRAS_INITIALIZE;
  public static final java.lang.String SYNC_EXTRAS_MANUAL;
  public static final java.lang.String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS;
  public static final java.lang.String SYNC_EXTRAS_UPLOAD;
  public static final int SYNC_OBSERVER_TYPE_ACTIVE;
  public static final int SYNC_OBSERVER_TYPE_PENDING;
  public static final int SYNC_OBSERVER_TYPE_SETTINGS;
  public android.content.ContentResolver(android.content.Context);
  public final java.lang.String getType(android.net.Uri);
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String);
  public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal);
  public final android.net.Uri canonicalize(android.net.Uri);
  public final android.net.Uri uncanonicalize(android.net.Uri);
  public final java.io.InputStream openInputStream(android.net.Uri) throws java.io.FileNotFoundException;
  public final java.io.OutputStream openOutputStream(android.net.Uri) throws java.io.FileNotFoundException;
  public final java.io.OutputStream openOutputStream(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException;
  public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException;
  public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle) throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal) throws java.io.FileNotFoundException;
  public final android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public android.content.ContentProviderResult[] applyBatch(java.lang.String, java.util.ArrayList<android.content.ContentProviderOperation>) throws android.os.RemoteException, android.content.OperationApplicationException;
  public final int bulkInsert(android.net.Uri, android.content.ContentValues[]);
  public final int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public final int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public final android.os.Bundle call(android.net.Uri, java.lang.String, java.lang.String, android.os.Bundle);
  public final android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri);
  public final android.content.ContentProviderClient acquireContentProviderClient(java.lang.String);
  public final android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri);
  public final android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String);
  public final void registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver);
  public final void unregisterContentObserver(android.database.ContentObserver);
  public void notifyChange(android.net.Uri, android.database.ContentObserver);
  public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean);
  public void takePersistableUriPermission(android.net.Uri, int);
  public void releasePersistableUriPermission(android.net.Uri, int);
  public java.util.List<android.content.UriPermission> getPersistedUriPermissions();
  public java.util.List<android.content.UriPermission> getOutgoingPersistedUriPermissions();
  public void startSync(android.net.Uri, android.os.Bundle);
  public static void requestSync(android.accounts.Account, java.lang.String, android.os.Bundle);
  public static void requestSync(android.content.SyncRequest);
  public static void validateSyncExtrasBundle(android.os.Bundle);
  public void cancelSync(android.net.Uri);
  public static void cancelSync(android.accounts.Account, java.lang.String);
  public static android.content.SyncAdapterType[] getSyncAdapterTypes();
  public static boolean getSyncAutomatically(android.accounts.Account, java.lang.String);
  public static void setSyncAutomatically(android.accounts.Account, java.lang.String, boolean);
  public static void addPeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long);
  public static void removePeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle);
  public static void cancelSync(android.content.SyncRequest);
  public static java.util.List<android.content.PeriodicSync> getPeriodicSyncs(android.accounts.Account, java.lang.String);
  public static int getIsSyncable(android.accounts.Account, java.lang.String);
  public static void setIsSyncable(android.accounts.Account, java.lang.String, int);
  public static boolean getMasterSyncAutomatically();
  public static void setMasterSyncAutomatically(boolean);
  public static boolean isSyncActive(android.accounts.Account, java.lang.String);
  public static android.content.SyncInfo getCurrentSync();
  public static java.util.List<android.content.SyncInfo> getCurrentSyncs();
  public static boolean isSyncPending(android.accounts.Account, java.lang.String);
  public static java.lang.Object addStatusChangeListener(int, android.content.SyncStatusObserver);
  public static void removeStatusChangeListener(java.lang.Object);
}
