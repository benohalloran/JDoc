Compiled from "AudioManager.java"
public class android.media.AudioManager {
  public static final java.lang.String ACTION_AUDIO_BECOMING_NOISY;
  public static final java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED;
  public static final java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED;
  public static final int ADJUST_LOWER;
  public static final int ADJUST_RAISE;
  public static final int ADJUST_SAME;
  public static final int AUDIOFOCUS_GAIN;
  public static final int AUDIOFOCUS_GAIN_TRANSIENT;
  public static final int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE;
  public static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK;
  public static final int AUDIOFOCUS_LOSS;
  public static final int AUDIOFOCUS_LOSS_TRANSIENT;
  public static final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK;
  public static final int AUDIOFOCUS_REQUEST_FAILED;
  public static final int AUDIOFOCUS_REQUEST_GRANTED;
  public static final java.lang.String EXTRA_RINGER_MODE;
  public static final java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE;
  public static final java.lang.String EXTRA_SCO_AUDIO_STATE;
  public static final java.lang.String EXTRA_VIBRATE_SETTING;
  public static final java.lang.String EXTRA_VIBRATE_TYPE;
  public static final int FLAG_ALLOW_RINGER_MODES;
  public static final int FLAG_PLAY_SOUND;
  public static final int FLAG_REMOVE_SOUND_AND_VIBRATE;
  public static final int FLAG_SHOW_UI;
  public static final int FLAG_VIBRATE;
  public static final int FX_FOCUS_NAVIGATION_DOWN;
  public static final int FX_FOCUS_NAVIGATION_LEFT;
  public static final int FX_FOCUS_NAVIGATION_RIGHT;
  public static final int FX_FOCUS_NAVIGATION_UP;
  public static final int FX_KEYPRESS_DELETE;
  public static final int FX_KEYPRESS_INVALID;
  public static final int FX_KEYPRESS_RETURN;
  public static final int FX_KEYPRESS_SPACEBAR;
  public static final int FX_KEYPRESS_STANDARD;
  public static final int FX_KEY_CLICK;
  public static final int MODE_CURRENT;
  public static final int MODE_INVALID;
  public static final int MODE_IN_CALL;
  public static final int MODE_IN_COMMUNICATION;
  public static final int MODE_NORMAL;
  public static final int MODE_RINGTONE;
  public static final int NUM_STREAMS;
  public static final java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER;
  public static final java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE;
  public static final java.lang.String RINGER_MODE_CHANGED_ACTION;
  public static final int RINGER_MODE_NORMAL;
  public static final int RINGER_MODE_SILENT;
  public static final int RINGER_MODE_VIBRATE;
  public static final int ROUTE_ALL;
  public static final int ROUTE_BLUETOOTH;
  public static final int ROUTE_BLUETOOTH_A2DP;
  public static final int ROUTE_BLUETOOTH_SCO;
  public static final int ROUTE_EARPIECE;
  public static final int ROUTE_HEADSET;
  public static final int ROUTE_SPEAKER;
  public static final int SCO_AUDIO_STATE_CONNECTED;
  public static final int SCO_AUDIO_STATE_CONNECTING;
  public static final int SCO_AUDIO_STATE_DISCONNECTED;
  public static final int SCO_AUDIO_STATE_ERROR;
  public static final int STREAM_ALARM;
  public static final int STREAM_DTMF;
  public static final int STREAM_MUSIC;
  public static final int STREAM_NOTIFICATION;
  public static final int STREAM_RING;
  public static final int STREAM_SYSTEM;
  public static final int STREAM_VOICE_CALL;
  public static final int USE_DEFAULT_STREAM_TYPE;
  public static final java.lang.String VIBRATE_SETTING_CHANGED_ACTION;
  public static final int VIBRATE_SETTING_OFF;
  public static final int VIBRATE_SETTING_ON;
  public static final int VIBRATE_SETTING_ONLY_SILENT;
  public static final int VIBRATE_TYPE_NOTIFICATION;
  public static final int VIBRATE_TYPE_RINGER;
  android.media.AudioManager();
  public void dispatchMediaKeyEvent(android.view.KeyEvent);
  public void adjustStreamVolume(int, int, int);
  public void adjustVolume(int, int);
  public void adjustSuggestedStreamVolume(int, int, int);
  public int getRingerMode();
  public int getStreamMaxVolume(int);
  public int getStreamVolume(int);
  public void setRingerMode(int);
  public void setStreamVolume(int, int, int);
  public void setStreamSolo(int, boolean);
  public void setStreamMute(int, boolean);
  public boolean shouldVibrate(int);
  public int getVibrateSetting(int);
  public void setVibrateSetting(int, int);
  public void setSpeakerphoneOn(boolean);
  public boolean isSpeakerphoneOn();
  public boolean isBluetoothScoAvailableOffCall();
  public void startBluetoothSco();
  public void stopBluetoothSco();
  public void setBluetoothScoOn(boolean);
  public boolean isBluetoothScoOn();
  public void setBluetoothA2dpOn(boolean);
  public boolean isBluetoothA2dpOn();
  public void setWiredHeadsetOn(boolean);
  public boolean isWiredHeadsetOn();
  public void setMicrophoneMute(boolean);
  public boolean isMicrophoneMute();
  public void setMode(int);
  public int getMode();
  public void setRouting(int, int, int);
  public int getRouting(int);
  public boolean isMusicActive();
  public void setParameters(java.lang.String);
  public java.lang.String getParameters(java.lang.String);
  public void playSoundEffect(int);
  public void playSoundEffect(int, float);
  public void loadSoundEffects();
  public void unloadSoundEffects();
  public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, int, int);
  public int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener);
  public void registerMediaButtonEventReceiver(android.content.ComponentName);
  public void registerMediaButtonEventReceiver(android.app.PendingIntent);
  public void unregisterMediaButtonEventReceiver(android.content.ComponentName);
  public void unregisterMediaButtonEventReceiver(android.app.PendingIntent);
  public void registerRemoteControlClient(android.media.RemoteControlClient);
  public void unregisterRemoteControlClient(android.media.RemoteControlClient);
  public boolean registerRemoteController(android.media.RemoteController);
  public void unregisterRemoteController(android.media.RemoteController);
  public java.lang.String getProperty(java.lang.String);
}
