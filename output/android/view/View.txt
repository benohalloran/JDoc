Compiled from "View.java"
public class android.view.View implements android.graphics.drawable.Drawable$Callback,android.view.KeyEvent$Callback,android.view.accessibility.AccessibilityEventSource {
  public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE;
  public static final int ACCESSIBILITY_LIVE_REGION_NONE;
  public static final int ACCESSIBILITY_LIVE_REGION_POLITE;
  public static final android.util.Property<android.view.View, java.lang.Float> ALPHA;
  public static final int DRAWING_CACHE_QUALITY_AUTO;
  public static final int DRAWING_CACHE_QUALITY_HIGH;
  public static final int DRAWING_CACHE_QUALITY_LOW;
  protected static final int[] EMPTY_STATE_SET;
  protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET;
  protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] ENABLED_FOCUSED_STATE_SET;
  protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] ENABLED_SELECTED_STATE_SET;
  protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] ENABLED_STATE_SET;
  protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET;
  public static final int FIND_VIEWS_WITH_CONTENT_DESCRIPTION;
  public static final int FIND_VIEWS_WITH_TEXT;
  public static final int FOCUSABLES_ALL;
  public static final int FOCUSABLES_TOUCH_MODE;
  protected static final int[] FOCUSED_SELECTED_STATE_SET;
  protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] FOCUSED_STATE_SET;
  protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET;
  public static final int FOCUS_BACKWARD;
  public static final int FOCUS_DOWN;
  public static final int FOCUS_FORWARD;
  public static final int FOCUS_LEFT;
  public static final int FOCUS_RIGHT;
  public static final int FOCUS_UP;
  public static final int GONE;
  public static final int HAPTIC_FEEDBACK_ENABLED;
  public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO;
  public static final int IMPORTANT_FOR_ACCESSIBILITY_NO;
  public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS;
  public static final int IMPORTANT_FOR_ACCESSIBILITY_YES;
  public static final int INVISIBLE;
  public static final int KEEP_SCREEN_ON;
  public static final int LAYER_TYPE_HARDWARE;
  public static final int LAYER_TYPE_NONE;
  public static final int LAYER_TYPE_SOFTWARE;
  public static final int LAYOUT_DIRECTION_INHERIT;
  public static final int LAYOUT_DIRECTION_LOCALE;
  public static final int LAYOUT_DIRECTION_LTR;
  public static final int LAYOUT_DIRECTION_RTL;
  public static final int MEASURED_HEIGHT_STATE_SHIFT;
  public static final int MEASURED_SIZE_MASK;
  public static final int MEASURED_STATE_MASK;
  public static final int MEASURED_STATE_TOO_SMALL;
  public static final int NO_ID;
  public static final int OVER_SCROLL_ALWAYS;
  public static final int OVER_SCROLL_IF_CONTENT_SCROLLS;
  public static final int OVER_SCROLL_NEVER;
  protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET;
  protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_SELECTED_STATE_SET;
  protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_STATE_SET;
  protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET;
  public static final android.util.Property<android.view.View, java.lang.Float> ROTATION;
  public static final android.util.Property<android.view.View, java.lang.Float> ROTATION_X;
  public static final android.util.Property<android.view.View, java.lang.Float> ROTATION_Y;
  public static final android.util.Property<android.view.View, java.lang.Float> SCALE_X;
  public static final android.util.Property<android.view.View, java.lang.Float> SCALE_Y;
  public static final int SCREEN_STATE_OFF;
  public static final int SCREEN_STATE_ON;
  public static final int SCROLLBARS_INSIDE_INSET;
  public static final int SCROLLBARS_INSIDE_OVERLAY;
  public static final int SCROLLBARS_OUTSIDE_INSET;
  public static final int SCROLLBARS_OUTSIDE_OVERLAY;
  public static final int SCROLLBAR_POSITION_DEFAULT;
  public static final int SCROLLBAR_POSITION_LEFT;
  public static final int SCROLLBAR_POSITION_RIGHT;
  public static final int SCROLL_AXIS_HORIZONTAL;
  public static final int SCROLL_AXIS_NONE;
  public static final int SCROLL_AXIS_VERTICAL;
  protected static final int[] SELECTED_STATE_SET;
  protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET;
  public static final int SOUND_EFFECTS_ENABLED;
  public static final int STATUS_BAR_HIDDEN;
  public static final int STATUS_BAR_VISIBLE;
  public static final int SYSTEM_UI_FLAG_FULLSCREEN;
  public static final int SYSTEM_UI_FLAG_HIDE_NAVIGATION;
  public static final int SYSTEM_UI_FLAG_IMMERSIVE;
  public static final int SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
  public static final int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;
  public static final int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
  public static final int SYSTEM_UI_FLAG_LAYOUT_STABLE;
  public static final int SYSTEM_UI_FLAG_LOW_PROFILE;
  public static final int SYSTEM_UI_FLAG_VISIBLE;
  public static final int SYSTEM_UI_LAYOUT_FLAGS;
  public static final int TEXT_ALIGNMENT_CENTER;
  public static final int TEXT_ALIGNMENT_GRAVITY;
  public static final int TEXT_ALIGNMENT_INHERIT;
  public static final int TEXT_ALIGNMENT_TEXT_END;
  public static final int TEXT_ALIGNMENT_TEXT_START;
  public static final int TEXT_ALIGNMENT_VIEW_END;
  public static final int TEXT_ALIGNMENT_VIEW_START;
  public static final int TEXT_DIRECTION_ANY_RTL;
  public static final int TEXT_DIRECTION_FIRST_STRONG;
  public static final int TEXT_DIRECTION_INHERIT;
  public static final int TEXT_DIRECTION_LOCALE;
  public static final int TEXT_DIRECTION_LTR;
  public static final int TEXT_DIRECTION_RTL;
  public static final android.util.Property<android.view.View, java.lang.Float> TRANSLATION_X;
  public static final android.util.Property<android.view.View, java.lang.Float> TRANSLATION_Y;
  public static final android.util.Property<android.view.View, java.lang.Float> TRANSLATION_Z;
  protected static final java.lang.String VIEW_LOG_TAG;
  public static final int VISIBLE;
  protected static final int[] WINDOW_FOCUSED_STATE_SET;
  public static final android.util.Property<android.view.View, java.lang.Float> X;
  public static final android.util.Property<android.view.View, java.lang.Float> Y;
  public static final android.util.Property<android.view.View, java.lang.Float> Z;
  public android.view.View(android.content.Context);
  public android.view.View(android.content.Context, android.util.AttributeSet);
  public android.view.View(android.content.Context, android.util.AttributeSet, int);
  public android.view.View(android.content.Context, android.util.AttributeSet, int, int);
  public java.lang.String toString();
  protected void initializeFadingEdge(android.content.res.TypedArray);
  public int getVerticalFadingEdgeLength();
  public void setFadingEdgeLength(int);
  public int getHorizontalFadingEdgeLength();
  public int getVerticalScrollbarWidth();
  protected int getHorizontalScrollbarHeight();
  protected void initializeScrollbars(android.content.res.TypedArray);
  public void setVerticalScrollbarPosition(int);
  public int getVerticalScrollbarPosition();
  public void setOnFocusChangeListener(android.view.View$OnFocusChangeListener);
  public void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener);
  public void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener);
  public void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener);
  public void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener);
  public android.view.View$OnFocusChangeListener getOnFocusChangeListener();
  public void setOnClickListener(android.view.View$OnClickListener);
  public boolean hasOnClickListeners();
  public void setOnLongClickListener(android.view.View$OnLongClickListener);
  public void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener);
  public boolean performClick();
  public boolean callOnClick();
  public boolean performLongClick();
  public boolean showContextMenu();
  public android.view.ActionMode startActionMode(android.view.ActionMode$Callback);
  public void setOnKeyListener(android.view.View$OnKeyListener);
  public void setOnTouchListener(android.view.View$OnTouchListener);
  public void setOnGenericMotionListener(android.view.View$OnGenericMotionListener);
  public void setOnHoverListener(android.view.View$OnHoverListener);
  public void setOnDragListener(android.view.View$OnDragListener);
  public boolean requestRectangleOnScreen(android.graphics.Rect);
  public boolean requestRectangleOnScreen(android.graphics.Rect, boolean);
  public void clearFocus();
  public boolean hasFocus();
  public boolean hasFocusable();
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  public void sendAccessibilityEvent(int);
  public void announceForAccessibility(java.lang.CharSequence);
  public void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo();
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void setAccessibilityDelegate(android.view.View$AccessibilityDelegate);
  public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider();
  public java.lang.CharSequence getContentDescription();
  public void setContentDescription(java.lang.CharSequence);
  public int getLabelFor();
  public void setLabelFor(int);
  public boolean isFocused();
  public android.view.View findFocus();
  public boolean isScrollContainer();
  public void setScrollContainer(boolean);
  public int getDrawingCacheQuality();
  public void setDrawingCacheQuality(int);
  public boolean getKeepScreenOn();
  public void setKeepScreenOn(boolean);
  public int getNextFocusLeftId();
  public void setNextFocusLeftId(int);
  public int getNextFocusRightId();
  public void setNextFocusRightId(int);
  public int getNextFocusUpId();
  public void setNextFocusUpId(int);
  public int getNextFocusDownId();
  public void setNextFocusDownId(int);
  public int getNextFocusForwardId();
  public void setNextFocusForwardId(int);
  public boolean isShown();
  protected boolean fitSystemWindows(android.graphics.Rect);
  public android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets);
  public void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener);
  public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets);
  public void setFitsSystemWindows(boolean);
  public boolean getFitsSystemWindows();
  public void requestFitSystemWindows();
  public void requestApplyInsets();
  public int getVisibility();
  public void setVisibility(int);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public void setFocusable(boolean);
  public void setFocusableInTouchMode(boolean);
  public void setSoundEffectsEnabled(boolean);
  public boolean isSoundEffectsEnabled();
  public void setHapticFeedbackEnabled(boolean);
  public boolean isHapticFeedbackEnabled();
  public void setLayoutDirection(int);
  public int getLayoutDirection();
  public boolean hasTransientState();
  public void setHasTransientState(boolean);
  public boolean isAttachedToWindow();
  public boolean isLaidOut();
  public void setWillNotDraw(boolean);
  public boolean willNotDraw();
  public void setWillNotCacheDrawing(boolean);
  public boolean willNotCacheDrawing();
  public boolean isClickable();
  public void setClickable(boolean);
  public boolean isLongClickable();
  public void setLongClickable(boolean);
  public void setPressed(boolean);
  protected void dispatchSetPressed(boolean);
  public boolean isPressed();
  public boolean isSaveEnabled();
  public void setSaveEnabled(boolean);
  public boolean getFilterTouchesWhenObscured();
  public void setFilterTouchesWhenObscured(boolean);
  public boolean isSaveFromParentEnabled();
  public void setSaveFromParentEnabled(boolean);
  public final boolean isFocusable();
  public final boolean isFocusableInTouchMode();
  public android.view.View focusSearch(int);
  public boolean dispatchUnhandledMove(android.view.View, int);
  public java.util.ArrayList<android.view.View> getFocusables(int);
  public void addFocusables(java.util.ArrayList<android.view.View>, int);
  public void addFocusables(java.util.ArrayList<android.view.View>, int, int);
  public void findViewsWithText(java.util.ArrayList<android.view.View>, java.lang.CharSequence, int);
  public java.util.ArrayList<android.view.View> getTouchables();
  public void addTouchables(java.util.ArrayList<android.view.View>);
  public boolean isAccessibilityFocused();
  public final boolean requestFocus();
  public final boolean requestFocus(int);
  public boolean requestFocus(int, android.graphics.Rect);
  public final boolean requestFocusFromTouch();
  public int getImportantForAccessibility();
  public void setAccessibilityLiveRegion(int);
  public int getAccessibilityLiveRegion();
  public void setImportantForAccessibility(int);
  public boolean isImportantForAccessibility();
  public android.view.ViewParent getParentForAccessibility();
  public void addChildrenForAccessibility(java.util.ArrayList<android.view.View>);
  public boolean performAccessibilityAction(int, android.os.Bundle);
  public void onStartTemporaryDetach();
  public void onFinishTemporaryDetach();
  public android.view.KeyEvent$DispatcherState getKeyDispatcherState();
  public boolean dispatchKeyEventPreIme(android.view.KeyEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean onFilterTouchEventForSecurity(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  protected boolean dispatchHoverEvent(android.view.MotionEvent);
  protected boolean dispatchGenericPointerEvent(android.view.MotionEvent);
  protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent);
  public void dispatchWindowFocusChanged(boolean);
  public void onWindowFocusChanged(boolean);
  public boolean hasWindowFocus();
  protected void dispatchVisibilityChanged(android.view.View, int);
  protected void onVisibilityChanged(android.view.View, int);
  public void dispatchDisplayHint(int);
  protected void onDisplayHint(int);
  public void dispatchWindowVisibilityChanged(int);
  protected void onWindowVisibilityChanged(int);
  public int getWindowVisibility();
  public void getWindowVisibleDisplayFrame(android.graphics.Rect);
  public void dispatchConfigurationChanged(android.content.res.Configuration);
  protected void onConfigurationChanged(android.content.res.Configuration);
  public boolean isInTouchMode();
  public final android.content.Context getContext();
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public boolean onCheckIsTextEditor();
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public boolean checkInputConnectionProxy(android.view.View);
  public void createContextMenu(android.view.ContextMenu);
  protected android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
  protected void onCreateContextMenu(android.view.ContextMenu);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onHoverEvent(android.view.MotionEvent);
  public boolean isHovered();
  public void setHovered(boolean);
  public void onHoverChanged(boolean);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void cancelLongPress();
  public void setTouchDelegate(android.view.TouchDelegate);
  public android.view.TouchDelegate getTouchDelegate();
  public void bringToFront();
  protected void onScrollChanged(int, int, int, int);
  protected void onSizeChanged(int, int, int, int);
  protected void dispatchDraw(android.graphics.Canvas);
  public final android.view.ViewParent getParent();
  public void setScrollX(int);
  public void setScrollY(int);
  public final int getScrollX();
  public final int getScrollY();
  public final int getWidth();
  public final int getHeight();
  public void getDrawingRect(android.graphics.Rect);
  public final int getMeasuredWidth();
  public final int getMeasuredWidthAndState();
  public final int getMeasuredHeight();
  public final int getMeasuredHeightAndState();
  public final int getMeasuredState();
  public android.graphics.Matrix getMatrix();
  public float getCameraDistance();
  public void setCameraDistance(float);
  public float getRotation();
  public void setRotation(float);
  public float getRotationY();
  public void setRotationY(float);
  public float getRotationX();
  public void setRotationX(float);
  public float getScaleX();
  public void setScaleX(float);
  public float getScaleY();
  public void setScaleY(float);
  public float getPivotX();
  public void setPivotX(float);
  public float getPivotY();
  public void setPivotY(float);
  public float getAlpha();
  public boolean hasOverlappingRendering();
  public void setAlpha(float);
  public final int getTop();
  public final void setTop(int);
  public final int getBottom();
  public boolean isDirty();
  public final void setBottom(int);
  public final int getLeft();
  public final void setLeft(int);
  public final int getRight();
  public final void setRight(int);
  public float getX();
  public void setX(float);
  public float getY();
  public void setY(float);
  public float getZ();
  public void setZ(float);
  public float getElevation();
  public void setElevation(float);
  public float getTranslationX();
  public void setTranslationX(float);
  public float getTranslationY();
  public void setTranslationY(float);
  public float getTranslationZ();
  public void setTranslationZ(float);
  public android.animation.StateListAnimator getStateListAnimator();
  public void setStateListAnimator(android.animation.StateListAnimator);
  public void setOutline(android.graphics.Outline);
  public final boolean getClipToOutline();
  public void setClipToOutline(boolean);
  public void getHitRect(android.graphics.Rect);
  public void getFocusedRect(android.graphics.Rect);
  public boolean getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point);
  public final boolean getGlobalVisibleRect(android.graphics.Rect);
  public final boolean getLocalVisibleRect(android.graphics.Rect);
  public void offsetTopAndBottom(int);
  public void offsetLeftAndRight(int);
  public android.view.ViewGroup$LayoutParams getLayoutParams();
  public void setLayoutParams(android.view.ViewGroup$LayoutParams);
  public void scrollTo(int, int);
  public void scrollBy(int, int);
  protected boolean awakenScrollBars();
  protected boolean awakenScrollBars(int);
  protected boolean awakenScrollBars(int, boolean);
  public void invalidate(android.graphics.Rect);
  public void invalidate(int, int, int, int);
  public void invalidate();
  public boolean isOpaque();
  public android.os.Handler getHandler();
  public boolean post(java.lang.Runnable);
  public boolean postDelayed(java.lang.Runnable, long);
  public void postOnAnimation(java.lang.Runnable);
  public void postOnAnimationDelayed(java.lang.Runnable, long);
  public boolean removeCallbacks(java.lang.Runnable);
  public void postInvalidate();
  public void postInvalidate(int, int, int, int);
  public void postInvalidateDelayed(long);
  public void postInvalidateDelayed(long, int, int, int, int);
  public void postInvalidateOnAnimation();
  public void postInvalidateOnAnimation(int, int, int, int);
  public void computeScroll();
  public boolean isHorizontalFadingEdgeEnabled();
  public void setHorizontalFadingEdgeEnabled(boolean);
  public boolean isVerticalFadingEdgeEnabled();
  public void setVerticalFadingEdgeEnabled(boolean);
  protected float getTopFadingEdgeStrength();
  protected float getBottomFadingEdgeStrength();
  protected float getLeftFadingEdgeStrength();
  protected float getRightFadingEdgeStrength();
  public boolean isHorizontalScrollBarEnabled();
  public void setHorizontalScrollBarEnabled(boolean);
  public boolean isVerticalScrollBarEnabled();
  public void setVerticalScrollBarEnabled(boolean);
  public void setScrollbarFadingEnabled(boolean);
  public boolean isScrollbarFadingEnabled();
  public int getScrollBarDefaultDelayBeforeFade();
  public void setScrollBarDefaultDelayBeforeFade(int);
  public int getScrollBarFadeDuration();
  public void setScrollBarFadeDuration(int);
  public int getScrollBarSize();
  public void setScrollBarSize(int);
  public void setScrollBarStyle(int);
  public int getScrollBarStyle();
  protected int computeHorizontalScrollRange();
  protected int computeHorizontalScrollOffset();
  protected int computeHorizontalScrollExtent();
  protected int computeVerticalScrollRange();
  protected int computeVerticalScrollOffset();
  protected int computeVerticalScrollExtent();
  public boolean canScrollHorizontally(int);
  public boolean canScrollVertically(int);
  protected final void onDrawScrollBars(android.graphics.Canvas);
  protected void onDraw(android.graphics.Canvas);
  protected void onAttachedToWindow();
  public void onScreenStateChanged(int);
  public void onRtlPropertiesChanged(int);
  public boolean canResolveLayoutDirection();
  public boolean isLayoutDirectionResolved();
  protected void onDetachedFromWindow();
  protected int getWindowAttachCount();
  public android.os.IBinder getWindowToken();
  public android.view.WindowId getWindowId();
  public android.os.IBinder getApplicationWindowToken();
  public android.view.Display getDisplay();
  public final void cancelPendingInputEvents();
  public void onCancelPendingInputEvents();
  public void saveHierarchyState(android.util.SparseArray<android.os.Parcelable>);
  protected void dispatchSaveInstanceState(android.util.SparseArray<android.os.Parcelable>);
  protected android.os.Parcelable onSaveInstanceState();
  public void restoreHierarchyState(android.util.SparseArray<android.os.Parcelable>);
  protected void dispatchRestoreInstanceState(android.util.SparseArray<android.os.Parcelable>);
  protected void onRestoreInstanceState(android.os.Parcelable);
  public long getDrawingTime();
  public void setDuplicateParentStateEnabled(boolean);
  public boolean isDuplicateParentStateEnabled();
  public void setLayerType(int, android.graphics.Paint);
  public void setLayerPaint(android.graphics.Paint);
  public int getLayerType();
  public void buildLayer();
  public void setDrawingCacheEnabled(boolean);
  public boolean isDrawingCacheEnabled();
  public android.graphics.Bitmap getDrawingCache();
  public android.graphics.Bitmap getDrawingCache(boolean);
  public void destroyDrawingCache();
  public void setDrawingCacheBackgroundColor(int);
  public int getDrawingCacheBackgroundColor();
  public void buildDrawingCache();
  public void buildDrawingCache(boolean);
  public boolean isInEditMode();
  protected boolean isPaddingOffsetRequired();
  protected int getLeftPaddingOffset();
  protected int getRightPaddingOffset();
  protected int getTopPaddingOffset();
  protected int getBottomPaddingOffset();
  public boolean isHardwareAccelerated();
  public void setClipBounds(android.graphics.Rect);
  public android.graphics.Rect getClipBounds();
  public void draw(android.graphics.Canvas);
  public android.view.ViewOverlay getOverlay();
  public int getSolidColor();
  public boolean isLayoutRequested();
  public void layout(int, int, int, int);
  protected void onLayout(boolean, int, int, int, int);
  protected void onFinishInflate();
  public android.content.res.Resources getResources();
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public void unscheduleDrawable(android.graphics.drawable.Drawable);
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected void drawableStateChanged();
  public void refreshDrawableState();
  public final int[] getDrawableState();
  protected int[] onCreateDrawableState(int);
  protected static int[] mergeDrawableStates(int[], int[]);
  public void jumpDrawablesToCurrentState();
  public void setBackgroundColor(int);
  public void setBackgroundResource(int);
  public void setBackground(android.graphics.drawable.Drawable);
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable getBackground();
  public void setPadding(int, int, int, int);
  public void setPaddingRelative(int, int, int, int);
  public int getPaddingTop();
  public int getPaddingBottom();
  public int getPaddingLeft();
  public int getPaddingStart();
  public int getPaddingRight();
  public int getPaddingEnd();
  public boolean isPaddingRelative();
  public void setSelected(boolean);
  protected void dispatchSetSelected(boolean);
  public boolean isSelected();
  public void setActivated(boolean);
  protected void dispatchSetActivated(boolean);
  public boolean isActivated();
  public android.view.ViewTreeObserver getViewTreeObserver();
  public android.view.View getRootView();
  public void getLocationOnScreen(int[]);
  public void getLocationInWindow(int[]);
  public final android.view.View findViewById(int);
  public final android.view.View findViewWithTag(java.lang.Object);
  public void setId(int);
  public int getId();
  public java.lang.Object getTag();
  public void setTag(java.lang.Object);
  public java.lang.Object getTag(int);
  public void setTag(int, java.lang.Object);
  public int getBaseline();
  public boolean isInLayout();
  public void requestLayout();
  public void forceLayout();
  public final void measure(int, int);
  protected void onMeasure(int, int);
  protected final void setMeasuredDimension(int, int);
  public static int combineMeasuredStates(int, int);
  public static int resolveSize(int, int);
  public static int resolveSizeAndState(int, int, int);
  public static int getDefaultSize(int, int);
  protected int getSuggestedMinimumHeight();
  protected int getSuggestedMinimumWidth();
  public int getMinimumHeight();
  public void setMinimumHeight(int);
  public int getMinimumWidth();
  public void setMinimumWidth(int);
  public android.view.animation.Animation getAnimation();
  public void startAnimation(android.view.animation.Animation);
  public void clearAnimation();
  public void setAnimation(android.view.animation.Animation);
  protected void onAnimationStart();
  protected void onAnimationEnd();
  protected boolean onSetAlpha(int);
  public void playSoundEffect(int);
  public boolean performHapticFeedback(int);
  public boolean performHapticFeedback(int, int);
  public void setSystemUiVisibility(int);
  public int getSystemUiVisibility();
  public int getWindowSystemUiVisibility();
  public void onWindowSystemUiVisibilityChanged(int);
  public void dispatchWindowSystemUiVisiblityChanged(int);
  public void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener);
  public void dispatchSystemUiVisibilityChanged(int);
  public final boolean startDrag(android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int);
  public boolean onDragEvent(android.view.DragEvent);
  public boolean dispatchDragEvent(android.view.DragEvent);
  public static android.view.View inflate(android.content.Context, int, android.view.ViewGroup);
  protected boolean overScrollBy(int, int, int, int, int, int, int, int, boolean);
  protected void onOverScrolled(int, int, boolean, boolean);
  public int getOverScrollMode();
  public void setOverScrollMode(int);
  public void setNestedScrollingEnabled(boolean);
  public boolean isNestedScrollingEnabled();
  public boolean startNestedScroll(int);
  public void stopNestedScroll();
  public boolean hasNestedScrollingParent();
  public boolean dispatchNestedScroll(int, int, int, int, int[]);
  public boolean dispatchNestedPreScroll(int, int, int[], int[]);
  public boolean dispatchNestedFling(float, float, boolean);
  public void setTextDirection(int);
  public int getTextDirection();
  public boolean canResolveTextDirection();
  public boolean isTextDirectionResolved();
  public void setTextAlignment(int);
  public int getTextAlignment();
  public boolean canResolveTextAlignment();
  public boolean isTextAlignmentResolved();
  public static int generateViewId();
  public android.view.ViewPropertyAnimator animate();
  public final void setViewName(java.lang.String);
  public java.lang.String getViewName();
  static {};
}
