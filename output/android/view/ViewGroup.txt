Compiled from "ViewGroup.java"
public abstract class android.view.ViewGroup extends android.view.View implements android.view.ViewParent,android.view.ViewManager {
  protected static final int CLIP_TO_PADDING_MASK;
  public static final int FOCUS_AFTER_DESCENDANTS;
  public static final int FOCUS_BEFORE_DESCENDANTS;
  public static final int FOCUS_BLOCK_DESCENDANTS;
  public static final int LAYOUT_MODE_CLIP_BOUNDS;
  public static final int LAYOUT_MODE_OPTICAL_BOUNDS;
  public static final int PERSISTENT_ALL_CACHES;
  public static final int PERSISTENT_ANIMATION_CACHE;
  public static final int PERSISTENT_NO_CACHE;
  public static final int PERSISTENT_SCROLLING_CACHE;
  public android.view.ViewGroup(android.content.Context);
  public android.view.ViewGroup(android.content.Context, android.util.AttributeSet);
  public android.view.ViewGroup(android.content.Context, android.util.AttributeSet, int);
  public android.view.ViewGroup(android.content.Context, android.util.AttributeSet, int, int);
  public int getDescendantFocusability();
  public void setDescendantFocusability(int);
  public void requestChildFocus(android.view.View, android.view.View);
  public void focusableViewAvailable(android.view.View);
  public boolean showContextMenuForChild(android.view.View);
  public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
  public android.view.View focusSearch(android.view.View, int);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public boolean onRequestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void childHasTransientStateChanged(android.view.View, boolean);
  public boolean hasTransientState();
  public boolean dispatchUnhandledMove(android.view.View, int);
  public void clearChildFocus(android.view.View);
  public void clearFocus();
  public android.view.View getFocusedChild();
  public boolean hasFocus();
  public android.view.View findFocus();
  public boolean hasFocusable();
  public void addFocusables(java.util.ArrayList<android.view.View>, int, int);
  public void findViewsWithText(java.util.ArrayList<android.view.View>, java.lang.CharSequence, int);
  public void dispatchWindowFocusChanged(boolean);
  public void addTouchables(java.util.ArrayList<android.view.View>);
  public void dispatchDisplayHint(int);
  protected void dispatchVisibilityChanged(android.view.View, int);
  public void dispatchWindowVisibilityChanged(int);
  public void dispatchConfigurationChanged(android.content.res.Configuration);
  public void recomputeViewAttributes(android.view.View);
  public void bringChildToFront(android.view.View);
  public boolean dispatchDragEvent(android.view.DragEvent);
  public void dispatchWindowSystemUiVisiblityChanged(int);
  public void dispatchSystemUiVisibilityChanged(int);
  public boolean dispatchKeyEventPreIme(android.view.KeyEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  protected boolean dispatchHoverEvent(android.view.MotionEvent);
  public void addChildrenForAccessibility(java.util.ArrayList<android.view.View>);
  public boolean onInterceptHoverEvent(android.view.MotionEvent);
  protected boolean dispatchGenericPointerEvent(android.view.MotionEvent);
  protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public void setMotionEventSplittingEnabled(boolean);
  public boolean isMotionEventSplittingEnabled();
  public boolean isTransitionGroup();
  public void setTransitionGroup(boolean);
  public void requestDisallowInterceptTouchEvent(boolean);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean requestFocus(int, android.graphics.Rect);
  protected boolean onRequestFocusInDescendants(int, android.graphics.Rect);
  public void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int);
  protected void dispatchSaveInstanceState(android.util.SparseArray<android.os.Parcelable>);
  protected void dispatchFreezeSelfOnly(android.util.SparseArray<android.os.Parcelable>);
  protected void dispatchRestoreInstanceState(android.util.SparseArray<android.os.Parcelable>);
  protected void dispatchThawSelfOnly(android.util.SparseArray<android.os.Parcelable>);
  protected void setChildrenDrawingCacheEnabled(boolean);
  protected void onAnimationStart();
  protected void onAnimationEnd();
  protected void dispatchDraw(android.graphics.Canvas);
  public android.view.ViewGroupOverlay getOverlay();
  protected int getChildDrawingOrder(int, int);
  protected boolean drawChild(android.graphics.Canvas, android.view.View, long);
  public boolean getClipChildren();
  public void setClipChildren(boolean);
  public void setClipToPadding(boolean);
  public void dispatchSetSelected(boolean);
  public void dispatchSetActivated(boolean);
  protected void dispatchSetPressed(boolean);
  protected void setStaticTransformationsEnabled(boolean);
  protected boolean getChildStaticTransformation(android.view.View, android.view.animation.Transformation);
  public void addView(android.view.View);
  public void addView(android.view.View, int);
  public void addView(android.view.View, int, int);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams);
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected boolean addViewInLayout(android.view.View, int, android.view.ViewGroup$LayoutParams);
  protected boolean addViewInLayout(android.view.View, int, android.view.ViewGroup$LayoutParams, boolean);
  protected void cleanupLayoutState(android.view.View);
  protected void attachLayoutAnimationParameters(android.view.View, android.view.ViewGroup$LayoutParams, int, int);
  public void removeView(android.view.View);
  public void removeViewInLayout(android.view.View);
  public void removeViewsInLayout(int, int);
  public void removeViewAt(int);
  public void removeViews(int, int);
  public void setLayoutTransition(android.animation.LayoutTransition);
  public android.animation.LayoutTransition getLayoutTransition();
  public void removeAllViews();
  public void removeAllViewsInLayout();
  protected void removeDetachedView(android.view.View, boolean);
  protected void attachViewToParent(android.view.View, int, android.view.ViewGroup$LayoutParams);
  protected void detachViewFromParent(android.view.View);
  protected void detachViewFromParent(int);
  protected void detachViewsFromParent(int, int);
  protected void detachAllViewsFromParent();
  public final void invalidateChild(android.view.View, android.graphics.Rect);
  public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect);
  public final void offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect);
  public final void offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect);
  public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point);
  public final void layout(int, int, int, int);
  protected abstract void onLayout(boolean, int, int, int, int);
  protected boolean canAnimate();
  public void startLayoutAnimation();
  public void scheduleLayoutAnimation();
  public void setLayoutAnimation(android.view.animation.LayoutAnimationController);
  public android.view.animation.LayoutAnimationController getLayoutAnimation();
  public boolean isAnimationCacheEnabled();
  public void setAnimationCacheEnabled(boolean);
  public boolean isAlwaysDrawnWithCacheEnabled();
  public void setAlwaysDrawnWithCacheEnabled(boolean);
  protected boolean isChildrenDrawnWithCacheEnabled();
  protected void setChildrenDrawnWithCacheEnabled(boolean);
  protected boolean isChildrenDrawingOrderEnabled();
  protected void setChildrenDrawingOrderEnabled(boolean);
  public int getPersistentDrawingCache();
  public void setPersistentDrawingCache(int);
  public int getLayoutMode();
  public void setLayoutMode(int);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected void debug(int);
  public int indexOfChild(android.view.View);
  public int getChildCount();
  public android.view.View getChildAt(int);
  protected void measureChildren(int, int);
  protected void measureChild(android.view.View, int, int);
  protected void measureChildWithMargins(android.view.View, int, int, int, int);
  public static int getChildMeasureSpec(int, int, int);
  public void clearDisappearingChildren();
  public void startViewTransition(android.view.View);
  public void endViewTransition(android.view.View);
  public boolean gatherTransparentRegion(android.graphics.Region);
  public void requestTransparentRegion(android.view.View);
  public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets);
  public android.view.animation.Animation$AnimationListener getLayoutAnimationListener();
  protected void drawableStateChanged();
  public void jumpDrawablesToCurrentState();
  protected int[] onCreateDrawableState(int);
  public void setAddStatesFromChildren(boolean);
  public boolean addStatesFromChildren();
  public void childDrawableStateChanged(android.view.View);
  public void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener);
  public boolean shouldDelayChildPressedState();
  public boolean onStartNestedScroll(android.view.View, android.view.View, int);
  public void onNestedScrollAccepted(android.view.View, android.view.View, int);
  public void onStopNestedScroll(android.view.View);
  public void onNestedScroll(android.view.View, int, int, int, int);
  public void onNestedPreScroll(android.view.View, int, int, int[]);
  public boolean onNestedFling(android.view.View, float, float, boolean);
  public int getNestedScrollAxes();
  public android.view.ViewOverlay getOverlay();
}
