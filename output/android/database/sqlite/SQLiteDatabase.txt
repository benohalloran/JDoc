Compiled from "SQLiteDatabase.java"
public final class android.database.sqlite.SQLiteDatabase extends android.database.sqlite.SQLiteClosable {
  public static final int CONFLICT_ABORT;
  public static final int CONFLICT_FAIL;
  public static final int CONFLICT_IGNORE;
  public static final int CONFLICT_NONE;
  public static final int CONFLICT_REPLACE;
  public static final int CONFLICT_ROLLBACK;
  public static final int CREATE_IF_NECESSARY;
  public static final int ENABLE_WRITE_AHEAD_LOGGING;
  public static final int MAX_SQL_CACHE_SIZE;
  public static final int NO_LOCALIZED_COLLATORS;
  public static final int OPEN_READONLY;
  public static final int OPEN_READWRITE;
  public static final int SQLITE_MAX_LIKE_PATTERN_LENGTH;
  android.database.sqlite.SQLiteDatabase();
  protected void finalize() throws java.lang.Throwable;
  protected void onAllReferencesReleased();
  public static int releaseMemory();
  public void setLockingEnabled(boolean);
  public void beginTransaction();
  public void beginTransactionNonExclusive();
  public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener);
  public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener);
  public void endTransaction();
  public void setTransactionSuccessful();
  public boolean inTransaction();
  public boolean isDbLockedByCurrentThread();
  public boolean isDbLockedByOtherThreads();
  public boolean yieldIfContended();
  public boolean yieldIfContendedSafely();
  public boolean yieldIfContendedSafely(long);
  public java.util.Map<java.lang.String, java.lang.String> getSyncedTables();
  public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int);
  public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public static boolean deleteDatabase(java.io.File);
  public static android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory);
  public int getVersion();
  public void setVersion(int);
  public long getMaximumSize();
  public long setMaximumSize(long);
  public long getPageSize();
  public void setPageSize(long);
  public void markTableSyncable(java.lang.String, java.lang.String);
  public void markTableSyncable(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String findEditTable(java.lang.String);
  public android.database.sqlite.SQLiteStatement compileStatement(java.lang.String) throws android.database.SQLException;
  public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal);
  public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal);
  public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor rawQuery(java.lang.String, java.lang.String[]);
  public android.database.Cursor rawQuery(java.lang.String, java.lang.String[], android.os.CancellationSignal);
  public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String);
  public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal);
  public long insert(java.lang.String, java.lang.String, android.content.ContentValues);
  public long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException;
  public long replace(java.lang.String, java.lang.String, android.content.ContentValues);
  public long replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException;
  public long insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int);
  public int delete(java.lang.String, java.lang.String, java.lang.String[]);
  public int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int);
  public void execSQL(java.lang.String) throws android.database.SQLException;
  public void execSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException;
  public boolean isReadOnly();
  public boolean isOpen();
  public boolean needUpgrade(int);
  public final java.lang.String getPath();
  public void setLocale(java.util.Locale);
  public void setMaxSqlCacheSize(int);
  public void setForeignKeyConstraintsEnabled(boolean);
  public boolean enableWriteAheadLogging();
  public void disableWriteAheadLogging();
  public boolean isWriteAheadLoggingEnabled();
  public java.util.List<android.util.Pair<java.lang.String, java.lang.String>> getAttachedDbs();
  public boolean isDatabaseIntegrityOk();
  public java.lang.String toString();
}
