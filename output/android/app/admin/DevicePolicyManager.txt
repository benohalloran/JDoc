Compiled from "DevicePolicyManager.java"
public class android.app.admin.DevicePolicyManager {
  public static final java.lang.String ACTION_ADD_DEVICE_ADMIN;
  public static final java.lang.String ACTION_PROVISION_MANAGED_PROFILE;
  public static final java.lang.String ACTION_SET_NEW_PASSWORD;
  public static final java.lang.String ACTION_START_ENCRYPTION;
  public static final int ENCRYPTION_STATUS_ACTIVATING;
  public static final int ENCRYPTION_STATUS_ACTIVE;
  public static final int ENCRYPTION_STATUS_INACTIVE;
  public static final int ENCRYPTION_STATUS_UNSUPPORTED;
  public static final java.lang.String EXTRA_ADD_EXPLANATION;
  public static final java.lang.String EXTRA_DEVICE_ADMIN;
  public static final java.lang.String EXTRA_PROVISIONING_DEFAULT_MANAGED_PROFILE_NAME;
  public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME;
  public static int FLAG_TO_MANAGED_PROFILE;
  public static int FLAG_TO_PRIMARY_USER;
  public static final int KEYGUARD_DISABLE_FEATURES_ALL;
  public static final int KEYGUARD_DISABLE_FEATURES_NONE;
  public static final int KEYGUARD_DISABLE_SECURE_CAMERA;
  public static final int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS;
  public static final int KEYGUARD_DISABLE_TRUST_AGENTS;
  public static final int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS;
  public static final int KEYGUARD_DISABLE_WIDGETS_ALL;
  public static final int PASSWORD_QUALITY_ALPHABETIC;
  public static final int PASSWORD_QUALITY_ALPHANUMERIC;
  public static final int PASSWORD_QUALITY_BIOMETRIC_WEAK;
  public static final int PASSWORD_QUALITY_COMPLEX;
  public static final int PASSWORD_QUALITY_NUMERIC;
  public static final int PASSWORD_QUALITY_SOMETHING;
  public static final int PASSWORD_QUALITY_UNSPECIFIED;
  public static final int RESET_PASSWORD_REQUIRE_ENTRY;
  public static final int WIPE_EXTERNAL_STORAGE;
  android.app.admin.DevicePolicyManager();
  public boolean isAdminActive(android.content.ComponentName);
  public java.util.List<android.content.ComponentName> getActiveAdmins();
  public void removeActiveAdmin(android.content.ComponentName);
  public boolean hasGrantedPolicy(android.content.ComponentName, int);
  public void setPasswordQuality(android.content.ComponentName, int);
  public int getPasswordQuality(android.content.ComponentName);
  public void setPasswordMinimumLength(android.content.ComponentName, int);
  public int getPasswordMinimumLength(android.content.ComponentName);
  public void setPasswordMinimumUpperCase(android.content.ComponentName, int);
  public int getPasswordMinimumUpperCase(android.content.ComponentName);
  public void setPasswordMinimumLowerCase(android.content.ComponentName, int);
  public int getPasswordMinimumLowerCase(android.content.ComponentName);
  public void setPasswordMinimumLetters(android.content.ComponentName, int);
  public int getPasswordMinimumLetters(android.content.ComponentName);
  public void setPasswordMinimumNumeric(android.content.ComponentName, int);
  public int getPasswordMinimumNumeric(android.content.ComponentName);
  public void setPasswordMinimumSymbols(android.content.ComponentName, int);
  public int getPasswordMinimumSymbols(android.content.ComponentName);
  public void setPasswordMinimumNonLetter(android.content.ComponentName, int);
  public int getPasswordMinimumNonLetter(android.content.ComponentName);
  public void setPasswordHistoryLength(android.content.ComponentName, int);
  public void setPasswordExpirationTimeout(android.content.ComponentName, long);
  public long getPasswordExpirationTimeout(android.content.ComponentName);
  public long getPasswordExpiration(android.content.ComponentName);
  public int getPasswordHistoryLength(android.content.ComponentName);
  public int getPasswordMaximumLength(int);
  public boolean isActivePasswordSufficient();
  public int getCurrentFailedPasswordAttempts();
  public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int);
  public int getMaximumFailedPasswordsForWipe(android.content.ComponentName);
  public boolean resetPassword(java.lang.String, int);
  public void setMaximumTimeToLock(android.content.ComponentName, long);
  public long getMaximumTimeToLock(android.content.ComponentName);
  public void lockNow();
  public void wipeData(int);
  public int setStorageEncryption(android.content.ComponentName, boolean);
  public boolean getStorageEncryption(android.content.ComponentName);
  public int getStorageEncryptionStatus();
  public void setCameraDisabled(android.content.ComponentName, boolean);
  public boolean getCameraDisabled(android.content.ComponentName);
  public void setKeyguardDisabledFeatures(android.content.ComponentName, int);
  public int getKeyguardDisabledFeatures(android.content.ComponentName);
  public boolean isDeviceOwnerApp(java.lang.String);
  public void setProfileEnabled(android.content.ComponentName);
  public boolean isProfileOwnerApp(java.lang.String);
  public void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName);
  public void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String);
  public void setApplicationRestrictions(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public void addForwardingIntentFilter(android.content.ComponentName, android.content.IntentFilter, int);
  public void clearForwardingIntentFilters(android.content.ComponentName);
  public android.os.UserHandle createUser(android.content.ComponentName, java.lang.String);
  public boolean removeUser(android.content.ComponentName, android.os.UserHandle);
  public android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String);
  public void addUserRestriction(android.content.ComponentName, java.lang.String);
  public void clearUserRestriction(android.content.ComponentName, java.lang.String);
  public boolean setApplicationBlocked(android.content.ComponentName, java.lang.String, boolean);
  public int setApplicationsBlocked(android.content.ComponentName, android.content.Intent, boolean);
  public boolean isApplicationBlocked(android.content.ComponentName, java.lang.String);
  public void enableSystemApp(android.content.ComponentName, java.lang.String);
  public int enableSystemApp(android.content.ComponentName, android.content.Intent);
  public void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean);
  public java.lang.String[] getAccountTypesWithManagementDisabled();
  public void setLockTaskComponents(android.content.ComponentName[]) throws java.lang.SecurityException;
  public boolean isLockTaskPermitted(android.content.ComponentName);
  public void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String);
  public void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String);
}
