Compiled from "Allocation.java"
public class android.renderscript.Allocation extends android.renderscript.BaseObj {
  public static final int USAGE_GRAPHICS_CONSTANTS;
  public static final int USAGE_GRAPHICS_RENDER_TARGET;
  public static final int USAGE_GRAPHICS_TEXTURE;
  public static final int USAGE_GRAPHICS_VERTEX;
  public static final int USAGE_IO_INPUT;
  public static final int USAGE_IO_OUTPUT;
  public static final int USAGE_SCRIPT;
  public static final int USAGE_SHARED;
  android.renderscript.Allocation();
  public android.renderscript.Element getElement();
  public int getUsage();
  public int getBytesSize();
  protected void finalize() throws java.lang.Throwable;
  public android.renderscript.Type getType();
  public void syncAll(int);
  public void ioSend();
  public void ioReceive();
  public void copyFrom(android.renderscript.BaseObj[]);
  public void copyFromUnchecked(java.lang.Object);
  public void copyFromUnchecked(int[]);
  public void copyFromUnchecked(short[]);
  public void copyFromUnchecked(byte[]);
  public void copyFromUnchecked(float[]);
  public void copyFrom(java.lang.Object);
  public void copyFrom(int[]);
  public void copyFrom(short[]);
  public void copyFrom(byte[]);
  public void copyFrom(float[]);
  public void copyFrom(android.graphics.Bitmap);
  public void copyFrom(android.renderscript.Allocation);
  public void setFromFieldPacker(int, android.renderscript.FieldPacker);
  public void setFromFieldPacker(int, int, android.renderscript.FieldPacker);
  public void generateMipmaps();
  public void copy1DRangeFromUnchecked(int, int, java.lang.Object);
  public void copy1DRangeFromUnchecked(int, int, int[]);
  public void copy1DRangeFromUnchecked(int, int, short[]);
  public void copy1DRangeFromUnchecked(int, int, byte[]);
  public void copy1DRangeFromUnchecked(int, int, float[]);
  public void copy1DRangeFrom(int, int, java.lang.Object);
  public void copy1DRangeFrom(int, int, int[]);
  public void copy1DRangeFrom(int, int, short[]);
  public void copy1DRangeFrom(int, int, byte[]);
  public void copy1DRangeFrom(int, int, float[]);
  public void copy1DRangeFrom(int, int, android.renderscript.Allocation, int);
  public void copy2DRangeFrom(int, int, int, int, java.lang.Object);
  public void copy2DRangeFrom(int, int, int, int, byte[]);
  public void copy2DRangeFrom(int, int, int, int, short[]);
  public void copy2DRangeFrom(int, int, int, int, int[]);
  public void copy2DRangeFrom(int, int, int, int, float[]);
  public void copy2DRangeFrom(int, int, int, int, android.renderscript.Allocation, int, int);
  public void copy2DRangeFrom(int, int, android.graphics.Bitmap);
  public void copyTo(android.graphics.Bitmap);
  public void copyTo(java.lang.Object);
  public void copyTo(byte[]);
  public void copyTo(short[]);
  public void copyTo(int[]);
  public void copyTo(float[]);
  public synchronized void resize(int);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, int);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type);
  public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int, int);
  public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int);
  public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public android.view.Surface getSurface();
  public void setSurface(android.view.Surface);
  public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap);
  public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap);
  public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap);
  public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int);
  public static android.renderscript.Allocation createFromString(android.renderscript.RenderScript, java.lang.String, int);
  public void setOnBufferAvailableListener(android.renderscript.Allocation$OnBufferAvailableListener);
}
